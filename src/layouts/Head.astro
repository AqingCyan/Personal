---
import { ClientRouter } from 'astro:transitions'
import { themeConfig } from '@/config'

interface Props {
  postTitle?: string
  postDescription?: string
  postSlug?: string
}

const { postTitle, postDescription, postSlug } = Astro.props

const {
  mode: defaultMode,
  light: { background: lightMode },
  dark: { background: darkMode },
} = themeConfig.color
const { reduceMotion } = themeConfig.global
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <meta name="description" content="Astro description" />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="generator" content={Astro.generator} />
  <title>Astro</title>

  <!-- 预加载字体 -->
  <link
    rel="preload"
    href="/fonts/EarlySummer-VF-Split/EarlySummer-VF-Subset.woff2"
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link rel="preload" href="/fonts/Snell-Black-SF.woff2" as="font" type="font/woff2" crossorigin />
  <link rel="preload" href="/fonts/Snell-Bold-SF.woff2" as="font" type="font/woff2" crossorigin />
  <link rel="preload" href="/fonts/STIX-VF.woff2" as="font" type="font/woff2" crossorigin />
  <link rel="preload" href="/fonts/STIX-Italic-VF.woff2" as="font" type="font/woff2" crossorigin />

  <!-- Global View Transition -->
  <ClientRouter fallback="none" />

  <!-- 主题切换 -->
  <script is:inline define:vars={{ defaultMode, lightMode, darkMode, reduceMotion }}>
    // 检查当前主题是否为暗色模式
    // 优先级：本地存储主题 > 默认主题 > 系统偏好
    function isCurrentDark() {
      const currentTheme = localStorage.getItem('theme')
      if (currentTheme) {
        return currentTheme === 'dark'
      }
      if (defaultMode === 'light') {
        return false
      }
      if (defaultMode === 'dark') {
        return true
      }

      return window.matchMedia('(prefers-color-scheme: dark)').matches
    }

    // 初始化主题
    function initTheme(doc = document) {
      const isDark = isCurrentDark()
      doc.documentElement.classList.toggle('dark', isDark)
      const metaTheme = doc.head.querySelector('meta[name="theme-color"]')
      metaTheme?.setAttribute('content', isDark ? darkMode : lightMode)
    }

    // 检查并初始化动画偏好
    function initMotionPref(doc = document) {
      // 优先级：站点配置 > 系统动画偏好 > 视图转换支持
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches
      const supportsViewTransitions = 'startViewTransition' in doc
      const shouldReduceMotion = reduceMotion || prefersReducedMotion || !supportsViewTransitions
      doc.documentElement.classList.toggle('reduce-motion', shouldReduceMotion)
      doc.documentElement.classList.add('js')
    }

    // 1. 初始化主题
    initTheme()
    initMotionPref()

    // 2. 在页面过渡之前更新主题以防止闪烁
    document.addEventListener('astro:before-swap', ({ newDocument }) => {
      initTheme(newDocument)
      initMotionPref(newDocument)
    })

    // 3. 实时监听系统主题变化
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches: isDark }) => {
      localStorage.setItem('theme', isDark ? 'dark' : 'light')
      initTheme()
      document.dispatchEvent(new Event('theme-changed'))
    })
  </script>
</head>
